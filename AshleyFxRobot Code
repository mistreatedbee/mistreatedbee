//+------------------------------------------------------------------+
//|                               AshleyFx_Robot CurrencyPairsV3.mq4 |
//|                                         Copyright 2023, AshleyFx |
//|                                         https://www.AshleyFx.com |
//+------------------------------------------------------------------+
#property copyright "2023, AshleyFx." 
#property link "http://www.AshleyFxRobot.com" 
#property description "AshleyFxRobot" 
#define MAGICNUM 20131111 

#property strict

double breakevenPips = 10; // Pips to move Stop Loss to breakeven

// Function to find support and resistance levels
void FindSupportResistance()
{
    int barsToCheck = 20; // Number of bars to analyze
    double tolerance = 0.0001; // Tolerance for identifying support/resistance levels
    int MagicNumber = 30;
    int ticket;
    double stopLossDistance = 0.0010; // Distance in points for Stop Loss
    double takeProfitDistance = 0.0110; // Distance in points for Take Profit

    int totalBars = MathMin(barsToCheck, Bars - 1);

    // Find support and resistance levels
    double supportLevel = Low[ArrayMinimum(Low, totalBars)];
    double resistanceLevel = High[ArrayMaximum(High, totalBars)];

    // Check if current price is near support or resistance level
    double currentPrice = Close[0];
    bool nearSupport = MathAbs(currentPrice - supportLevel) < tolerance;
    bool nearResistance = MathAbs(currentPrice - resistanceLevel) < tolerance;

    // Print the support and resistance levels
    Print("Support Level: ", supportLevel);
    Print("Resistance Level: ", resistanceLevel);

    // Print if current price is near support or resistance level
    if (nearSupport)
        Print("Current Price is near Support Level");

    if (nearResistance)
        Print("Current Price is near Resistance Level");

    // Find potential order blocks
    double orderBlockHigh = High[ArrayMaximum(High, totalBars)];
    double orderBlockLow = Low[ArrayMinimum(Low, totalBars)];

    // Check if current price is within the order block
    bool withinOrderBlock = currentPrice <= orderBlockHigh && currentPrice >= orderBlockLow;

    // Print the order block levels
    Print("Order Block High: ", orderBlockHigh);
    Print("Order Block Low: ", orderBlockLow);

    // Print if current price is within the order block
    if (withinOrderBlock)
        Print("Current Price is within Order Block");

    // Place trades automatically based on conditions
    if (nearSupport && withinOrderBlock)
    {
        // Place a buy trade
        double stopLossLevel = currentPrice - stopLossDistance;
        double takeProfitLevel = currentPrice + takeProfitDistance;

        Print("Placing Buy Trade");
        int ticket = OrderSend(Symbol(), OP_BUY, 0.01, Ask, 1, stopLossLevel, takeProfitLevel, "AshleyFX_Robot", MagicNumber, 0, Green);
        if (ticket > 0)
            Print("Buy Trade placed successfully");
        else
            Print("Failed to place Buy Trade. Error code:", GetLastError());
    }
    else if (nearResistance && withinOrderBlock)
    {
        // Place a sell trade
        double stopLossLevel = currentPrice + stopLossDistance;
        double takeProfitLevel = currentPrice - takeProfitDistance;

        Print("Placing Sell Trade");
        int ticket = OrderSend(Symbol(), OP_SELL, 0.01, Bid, 1, stopLossLevel, takeProfitLevel, "AshleyFX_Robot", MagicNumber, 0, Red);
        if (ticket > 0)
            Print("Sell Trade placed successfully");
        else
            Print("Failed to place Sell Trade. Error code:", GetLastError());
    }

    // Adjust Stop Loss to breakeven if trade is in profit by breakevenPips
    if (OrderSelect(ticket, SELECT_BY_TICKET) && OrderType() == OP_BUY)
    {
        double openPrice = OrderOpenPrice();
        double currentProfit = OrderProfit();
        double breakevenLevel = openPrice + (Point * breakevenPips);

        if (currentProfit >= breakevenPips && OrderStopLoss() < breakevenLevel)
        {
            if (OrderModify(ticket, openPrice, breakevenLevel, OrderTakeProfit(), 0, Green))
                Print("Stop Loss adjusted to breakeven for Buy Trade");
            else
                Print("Failed to adjust Stop Loss to breakeven for Buy Trade. Error code:", GetLastError());
        }
    }
    else if (OrderSelect(ticket, SELECT_BY_TICKET) && OrderType() == OP_SELL)
    {
        double openPrice = OrderOpenPrice();
        double currentProfit = OrderProfit();
        double breakevenLevel = openPrice - (Point * breakevenPips);

        if (currentProfit >= breakevenPips && OrderStopLoss() > breakevenLevel)
        {
            if (OrderModify(ticket, openPrice, breakevenLevel, OrderTakeProfit(), 0, Red))
                Print("Stop Loss adjusted to breakeven for Sell Trade");
            else
                Print("Failed to adjust Stop Loss to breakeven for Sell Trade. Error code:", GetLastError());
        }
    }
}

// The start function
void OnStart()
{
    FindSupportResistance();
}
//--- input parameters of the script
input string          InpName="FiboExpansion";   // Object name
input int             InpDate1=10;               // 1 st point's date, %
input int             InpPrice1=55;              // 1 st point's price, %
input int             InpDate2=30;               // 2 nd point's date, %
input int             InpPrice2=10;              // 2 nd point's price, %
input int             InpDate3=80;               // 3 rd point's date, %
input int             InpPrice3=75;              // 3 rd point's price, %
input color           InpColor=clrRed;           // Object color
input ENUM_LINE_STYLE InpStyle=STYLE_DASHDOTDOT; // Style of lines
input int             InpWidth=1;                // Width of the lines
input bool            InpBack=false;             // Background object
input bool            InpSelection=true;         // Highlight to move
input bool            InpRayRight=false;         // Object's continuation to the right
input bool            InpHidden=true;            // Hidden in the object list
input long            InpZOrder=0;               // Priority for mouse click
//+------------------------------------------------------------------+
//| Create Fibonacci Extension by the given coordinates              |
//+------------------------------------------------------------------+
bool FiboExpansionCreate(const long            chart_ID=0,           // chart's ID
                         const string          name="FiboExpansion", // channel name
                         const int             sub_window=0,         // subwindow index 
                         datetime              time1=0,              // first point time
                         double                price1=0,             // first point price
                         datetime              time2=0,              // second point time
                         double                price2=0,             // second point price
                         datetime              time3=0,              // third point time
                         double                price3=0,             // third point price
                         const color           clr=clrRed,           // object color
                         const ENUM_LINE_STYLE style=STYLE_SOLID,    // style of the lines
                         const int             width=1,              // width of the lines
                         const bool            back=false,           // in the background
                         const bool            selection=true,       // highlight to move
                         const bool            ray_right=false,      // object's continuation to the right
                         const bool            hidden=true,          // hidden in the object list
                         const long            z_order=0)            // priority for mouse click
  {
//--- set anchor points' coordinates if they are not set
   ChangeFiboExpansionEmptyPoints(time1,price1,time2,price2,time3,price3);
//--- reset the error value
   ResetLastError();
//--- Create Fibonacci Extension by the given coordinates
   if(!ObjectCreate(chart_ID,name,OBJ_EXPANSION,sub_window,time1,price1,time2,price2,time3,price3))
     {
      Print(__FUNCTION__,
            ": failed to create \"Fibonacci Extension\"! Error code = ",GetLastError());
      return(false);
     }
//--- set the object's color
   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);
//--- set the line style
   ObjectSetInteger(chart_ID,name,OBJPROP_STYLE,style);
//--- set width of the lines
   ObjectSetInteger(chart_ID,name,OBJPROP_WIDTH,width);
//--- display in the foreground (false) or background (true)
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);
//--- enable (true) or disable (false) the mode of highlighting the channel for moving
//--- when creating a graphical object using ObjectCreate function, the object cannot be
//--- highlighted and moved by default. Inside this method, selection parameter
//--- is true by default making it possible to highlight and move the object
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);
//--- enable (true) or disable (false) the mode of continuation of the object's display to the right
   ObjectSetInteger(chart_ID,name,OBJPROP_RAY_RIGHT,ray_right);
//--- hide (true) or display (false) graphical object name in the object list
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);
//--- set the priority for receiving the event of a mouse click in the chart
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Set number of levels and their parameters                        |
//+------------------------------------------------------------------+
bool FiboExpansionLevelsSet(int             levels,               // number of level lines
                            double          &values[],            // values of level lines
                            color           &colors[],            // color of level lines
                            ENUM_LINE_STYLE &styles[],            // style of level lines
                            int             &widths[],            // width of level lines
                            const long      chart_ID=0,           // chart's ID
                            const string    name="FiboExpansion") // object name
  {
//--- check array sizes
   if(levels!=ArraySize(colors) || levels!=ArraySize(styles) ||
      levels!=ArraySize(widths) || levels!=ArraySize(widths))
     {
      Print(__FUNCTION__,": array length does not correspond to the number of levels, error!");
      return(false);
     }
//--- set the number of levels
   ObjectSetInteger(chart_ID,name,OBJPROP_LEVELS,levels);
//--- set the properties of levels in the loop
   for(int i=0;i<levels;i++)
     {
      //--- level value
      ObjectSetDouble(chart_ID,name,OBJPROP_LEVELVALUE,i,values[i]);
      //--- level color
      ObjectSetInteger(chart_ID,name,OBJPROP_LEVELCOLOR,i,colors[i]);
      //--- level style
      ObjectSetInteger(chart_ID,name,OBJPROP_LEVELSTYLE,i,styles[i]);
      //--- level width
      ObjectSetInteger(chart_ID,name,OBJPROP_LEVELWIDTH,i,widths[i]);
      //--- level description
      ObjectSetString(chart_ID,name,OBJPROP_LEVELTEXT,i,"FE "+DoubleToString(100*values[i],1));
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Move Fibonacci Expansion anchor point                            |
//+------------------------------------------------------------------+
bool FiboExpansionPointChange(const long   chart_ID=0,           // chart's ID
                              const string name="FiboExpansion", // object name
                              const int    point_index=0,        // anchor point index
                              datetime     time=0,               // anchor point time coordinate
                              double       price=0)              // anchor point price coordinate
  {
//--- if point position is not set, move it to the current bar having Bid price
   if(!time)
      time=TimeCurrent();
   if(!price)
      price=SymbolInfoDouble(Symbol(),SYMBOL_BID);
//--- reset the error value
   ResetLastError();
//--- move the anchor point
   if(!ObjectMove(chart_ID,name,point_index,time,price))
     {
      Print(__FUNCTION__,
            ": failed to move the anchor point! Error code = ",GetLastError());
      return(false);
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Delete Fibonacci Expansion                                       |
//+------------------------------------------------------------------+
bool FiboExpansionDelete(const long   chart_ID=0,           // chart's ID
                         const string name="FiboExpansion") // object name
  {
//--- reset the error value
   ResetLastError();
//--- delete the object
   if(!ObjectDelete(chart_ID,name))
     {
      Print(__FUNCTION__,
            ": failed to delete \"Fibonacci Expansion\"! Error code = ",GetLastError());
      return(false);
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Check the values of Fibonacci Expansion anchor points and set    |
//| default values for empty ones                                    |
//+------------------------------------------------------------------+
void ChangeFiboExpansionEmptyPoints(datetime &time1,double &price1,datetime &time2,
                                    double &price2,datetime &time3,double &price3)
  {
//--- if the third (right) point's time is not set, it will be on the current bar
   if(!time3)
      time3=TimeCurrent();
//--- if the third point's price is not set, it will have Bid value
   if(!price3)
      price3=SymbolInfoDouble(Symbol(),SYMBOL_BID);
//--- if the first (left) point's time is not set, it is located 9 bars left from the third one
//--- array for receiving the open time of the last 10 bars
   datetime temp[];
   ArrayResize(temp,10);
   if(!time1)
     {
      CopyTime(Symbol(),Period(),time3,10,temp);
      //--- set the first point 9 bars left from the second one
      time1=temp[0];
     }
//--- if the first point's price is not set, it is equal to the third point's one
   if(!price1)
      price1=price3;
//--- if the second point's time is not set, it is located 7 bars left from the third one
   if(!time2)
      time2=temp[2];
//--- if the second point's price is not set, move it 250 points lower than the first one
   if(!price2)
      price2=price1-250*SymbolInfoDouble(Symbol(),SYMBOL_POINT);
  }
//+------------------------------------------------------------------+
//| Script program start function                                    |
//+------------------------------------------------------------------+
void Onstart()
  {
//--- check correctness of the input parameters
   if(InpDate1<0 || InpDate1>100 || InpPrice1<0 || InpPrice1>100 || 
      InpDate2<0 || InpDate2>100 || InpPrice2<0 || InpPrice2>100 || 
      InpDate3<0 || InpDate3>100 || InpPrice3<0 || InpPrice3>100)
     {
      Print("Error! Incorrect values of input parameters!");
      return;
     }
//--- number of visible bars in the chart window
   int bars=(int)ChartGetInteger(0,CHART_VISIBLE_BARS);
//--- price array size
   int accuracy=1000;
//--- arrays for storing the date and price values to be used
//--- for setting and changing object anchor points' coordinates
   datetime date[];
   double   price[];
//--- memory allocation
   ArrayResize(date,bars);
   ArrayResize(price,accuracy);
//--- fill the array of dates
   ResetLastError();
   if(CopyTime(Symbol(),Period(),0,bars,date)==-1)
     {
      Print("Failed to copy time values! Error code = ",GetLastError());
      return;
     }
//--- fill the array of prices
//--- find the highest and lowest values of the chart
   double max_price=ChartGetDouble(0,CHART_PRICE_MAX);
   double min_price=ChartGetDouble(0,CHART_PRICE_MIN);
//--- define a change step of a price and fill the array
   double step=(max_price-min_price)/accuracy;
   for(int i=0;i<accuracy;i++)
      price[i]=min_price+i*step;
//--- define points for drawing Fibonacci Expansion
   int d1=InpDate1*(bars-1)/100;
   int d2=InpDate2*(bars-1)/100;
   int d3=InpDate3*(bars-1)/100;
   int p1=InpPrice1*(accuracy-1)/100;
   int p2=InpPrice2*(accuracy-1)/100;
   int p3=InpPrice3*(accuracy-1)/100;
//--- create Fibonacci Expansion
   if(!FiboExpansionCreate(0,InpName,0,date[d1],price[p1],date[d2],price[p2],date[d3],price[p3],
      InpColor,InpStyle,InpWidth,InpBack,InpSelection,InpRayRight,InpHidden,InpZOrder))
     {
      return;
     }
//--- redraw the chart and wait for 1 second
   ChartRedraw();
   Sleep(1000);
//--- now, move the anchor points
//--- loop counter
   int v_steps=accuracy/10;
//--- move the first anchor point
   for(int i=0;i<v_steps;i++)
     {
      //--- use the following value
      if(p1>1)
         p1-=1;
      //--- move the point
      if(!FiboExpansionPointChange(0,InpName,0,date[d1],price[p1]))
         return;
      //--- check if the script's operation has been forcefully disabled
      if(IsStopped())
         return;
      //--- redraw the chart
      ChartRedraw();
     }
//--- 1 second of delay
   Sleep(1000);
//--- loop counter
   v_steps=accuracy/2;
//--- move the third anchor point
   for(int i=0;i<v_steps;i++)
     {
      //--- use the following value
      if(p3>1)
         p3-=1;
      //--- move the point
      if(!FiboExpansionPointChange(0,InpName,2,date[d3],price[p3]))
         return;
      //--- check if the script's operation has been forcefully disabled
      if(IsStopped())
         return;
      //--- redraw the chart
      ChartRedraw();
     }
//--- 1 second of delay
   Sleep(1000);
//--- loop counter
   v_steps=accuracy*4/5;
//--- move the second anchor point
   for(int i=0;i<v_steps;i++)
     {
      //--- use the following value
      if(p2<accuracy-1)
         p2+=1;
      //--- move the point
      if(!FiboExpansionPointChange(0,InpName,1,date[d2],price[p2]))
         return;
      //--- check if the script's operation has been forcefully disabled
      if(IsStopped())
         return;
      //--- redraw the chart
      ChartRedraw();
     }
//--- 1 second of delay
   Sleep(1000);
//--- delete the object from the chart
   FiboExpansionDelete(0,InpName);
   ChartRedraw();
//--- 1 second of delay
   Sleep(1000);
//---
  }
